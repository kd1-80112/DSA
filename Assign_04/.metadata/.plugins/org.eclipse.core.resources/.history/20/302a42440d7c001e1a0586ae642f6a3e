
/*Implement singly circular linked list using tail pointer
 *  (no head pointer). 
Compare time complexities of all operations.*/

package com.sunbeam;

public class List 
{
 public class node
 {
	 private int data;
	 private node next;
	 public node(int value)
	 {
		 data=value;
		 next=null;
	 }
 }
	 private node tail;
	 public int count;
	 public List()
	 {
		 tail=null;
		 count=0;
	 }
	 
	 public boolean isEmpty()
	 {
		 return tail==null;
	 }
	 public void addLast(int value)
	 {
		 node newnode=new node(value);
		 
		 if(isEmpty())
		 {
			 tail=newnode;
			 newnode.next=tail;
		 }
		 
		 else
		 {
			 newnode.next=tail.next;
			 tail.next=newnode;
			 tail=newnode;
			 
		 }
		 count++;
	 }
	 
	 public void addFirst(int value)
	 {
		 node newnode=new node(value);
		 if(isEmpty())
		 {
			 tail=newnode;
			 newnode.next=tail;
		 }
		  else
		 {
			     newnode.next=tail.next;
				 tail.next=newnode;
		 }
		 count++;
	 }
	 public void addPosition(int value,int position)
	 {
		 if(position<=1)
		 {
			 addFirst(value);
			 return;
		 }
		 if(position>count)
		 {
			 addLast(value);
			 return;
		 }
		 node newnode=new node(value);
         node trav=tail.next;
		 for(int i=1;i<position-1;i++)
		 {
			 trav=trav.next;
		 }
		newnode.next=trav.next;
		trav.next=newnode;
		count++;
	 }
	 
	 public void display()
	 {
		 node trav=tail.next;
		  do {
			 System.out.print(trav.data+"->");
			 trav=trav.next;
		     }while(trav!=tail.next);
		 
	 }
	 
 }

